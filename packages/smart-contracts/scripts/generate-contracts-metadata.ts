import chalk from "chalk";
import { readFileSync, readdirSync, existsSync, writeFileSync } from "node:fs";
import { join } from "node:path";

const getContractName = (path: string) => path.split(".json")[0];

const generateContractsMetadata = async () => {
  try {
    const deploymentsPath = join(process.cwd(), "ignition/deployments");
    if (!existsSync(deploymentsPath)) {
      console.warn("Deployments not found. Please run `yarn deploy` first.");
      process.exit(0);
    }
    console.log(chalk.blue("Start generate contracts metadata..."));
    const modules = readdirSync(join(process.cwd(), "ignition/deployments"));
    const contractNames: string[] = [];
    const chainIds: string[] = [];
    const data = modules.reduce<Record<string, any>>((pre, cur) => {
      const chainId = cur.split("-")[1];
      chainIds.push(chainId);
      const contractAdressPath = join(
        deploymentsPath,
        cur,
        "deployed_addresses.json"
      );
      const artifactsPath = join(deploymentsPath, cur, "artifacts");
      const contracts = readdirSync(artifactsPath).filter((f) =>
        /^\w+#\w+\.json$/.test(f)
      );
      const contractAddresses = JSON.parse(
        readFileSync(contractAdressPath, "utf8")
      );
      const data = contracts.reduce<Record<string, any>>((acc, cur) => {
        const name = getContractName(cur);
        if (!contractNames.includes(name)) {
          contractNames.push(name);
        }
        acc[name] = {
          address: contractAddresses[name],
          abi: JSON.parse(readFileSync(join(artifactsPath, cur), "utf8")).abi,
        };
        return acc;
      }, {});
      pre[chainId] = data;
      return pre;
    }, {});
    writeFileSync(
      join(process.cwd(), "../web/src/constants/contracts.ts"),
      [
        [
          "/**",
          " * This file is autogenerated by `deploy` script.",
          " * You should not edit it manually or your changes might be overwritten.",
          " */",
        ].join("\n"),
        `export type ContractName = ${contractNames
          .map((n) => `"${n}"`)
          .join(" | ")};`,
        `export type ChainId = ${chainIds.join(" | ")};`,
        `export default ${JSON.stringify(data, null, 2)} as const;\n`,
      ].join("\n\n")
    );
    console.log(chalk.green("Generate contracts metadata success!"));
  } catch (e) {
    console.log(chalk.bgRed("Generate contracts metadata failed!"));
    console.log(chalk.red(e));
  }
};

export default generateContractsMetadata;
